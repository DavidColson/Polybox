#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc --input shaders\compositor.shader --output source\generated\compositor.h --slang hlsl5 --bytecode --errfmt msvc

    Overview:
    =========
    Shader program: 'compositor':
        Get shader desc: compositor_shader_desc(sg_query_backend());
        Vertex shader: vs_compositor
            Attributes:
                ATTR_vs_compositor_pos => 0
                ATTR_vs_compositor_color0 => 1
                ATTR_vs_compositor_texcoord => 2
                ATTR_vs_compositor_normal => 3
            Uniform block 'vs_compositor_params':
                C struct: vs_compositor_params_t
                Bind slot: SLOT_vs_compositor_params => 0
        Fragment shader: fs_compositor
            Uniform block 'fs_compositor_params':
                C struct: fs_compositor_params_t
                Bind slot: SLOT_fs_compositor_params => 0
            Image 'core2DFrame':
                Image type: SG_IMAGETYPE_2D
                Sample type: SG_IMAGESAMPLETYPE_FLOAT
                Multisampled: false
                Bind slot: SLOT_core2DFrame => 0
            Image 'core3DFrame':
                Image type: SG_IMAGETYPE_2D
                Sample type: SG_IMAGESAMPLETYPE_FLOAT
                Multisampled: false
                Bind slot: SLOT_core3DFrame => 1
            Sampler 'nearestSampler':
                Type: SG_SAMPLERTYPE_FILTERING
                Bind slot: SLOT_nearestSampler => 0
            Image Sampler Pair 'core2DFrame_nearestSampler':
                Image: core2DFrame
                Sampler: nearestSampler
            Image Sampler Pair 'core3DFrame_nearestSampler':
                Image: core3DFrame
                Sampler: nearestSampler
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before compositor.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_vs_compositor_pos (0)
#define ATTR_vs_compositor_color0 (1)
#define ATTR_vs_compositor_texcoord (2)
#define ATTR_vs_compositor_normal (3)
#define SLOT_vs_compositor_params (0)
#define SLOT_fs_compositor_params (0)
#define SLOT_core2DFrame (0)
#define SLOT_core3DFrame (1)
#define SLOT_nearestSampler (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_compositor_params_t {
    Matrixf mvp;
} vs_compositor_params_t;
#pragma pack(pop)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct fs_compositor_params_t {
    Vec2f screenResolution;
    float time;
    uint8_t _pad_12[4];
} fs_compositor_params_t;
#pragma pack(pop)
/*
    cbuffer vs_compositor_params : register(b0)
    {
        row_major float4x4 _19_mvp : packoffset(c0);
    };


    static float4 gl_Position;
    static float3 pos;
    static float2 texcoords;
    static float2 texcoord;
    static float4 color0;
    static float3 normal;
    static float4 color;

    struct SPIRV_Cross_Input
    {
        float3 pos : TEXCOORD0;
        float4 color0 : TEXCOORD1;
        float2 texcoord : TEXCOORD2;
        float3 normal : TEXCOORD3;
    };

    struct SPIRV_Cross_Output
    {
        float4 color : TEXCOORD0;
        float2 texcoords : TEXCOORD1;
        float4 gl_Position : SV_Position;
    };

    void vert_main()
    {
        gl_Position = mul(float4(pos, 1.0f), _19_mvp);
        texcoords = texcoord;
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        pos = stage_input.pos;
        texcoord = stage_input.texcoord;
        color0 = stage_input.color0;
        normal = stage_input.normal;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.texcoords = texcoords;
        stage_output.color = color;
        return stage_output;
    }
*/
static const uint8_t vs_compositor_bytecode_hlsl5[1036] = {
    0x44,0x58,0x42,0x43,0x79,0x03,0x70,0x41,0xc5,0xa6,0x65,0xd5,0xa0,0xc7,0x15,0x02,
    0x39,0x65,0x94,0x72,0x01,0x00,0x00,0x00,0x0c,0x04,0x00,0x00,0x05,0x00,0x00,0x00,
    0x34,0x00,0x00,0x00,0x50,0x01,0x00,0x00,0xcc,0x01,0x00,0x00,0x3c,0x02,0x00,0x00,
    0x70,0x03,0x00,0x00,0x52,0x44,0x45,0x46,0x14,0x01,0x00,0x00,0x01,0x00,0x00,0x00,
    0x74,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,0x05,0xfe,0xff,
    0x10,0x81,0x00,0x00,0xec,0x00,0x00,0x00,0x52,0x44,0x31,0x31,0x3c,0x00,0x00,0x00,
    0x18,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x24,0x00,0x00,0x00,
    0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x76,0x73,0x5f,0x63,0x6f,0x6d,0x70,0x6f,
    0x73,0x69,0x74,0x6f,0x72,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x00,0xab,0xab,0xab,
    0x5c,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x8c,0x00,0x00,0x00,0x40,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xb4,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x40,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0xc8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
    0x5f,0x31,0x39,0x5f,0x6d,0x76,0x70,0x00,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,
    0x00,0xab,0xab,0xab,0x02,0x00,0x03,0x00,0x04,0x00,0x04,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0xbc,0x00,0x00,0x00,0x4d,0x69,0x63,0x72,0x6f,0x73,0x6f,0x66,
    0x74,0x20,0x28,0x52,0x29,0x20,0x48,0x4c,0x53,0x4c,0x20,0x53,0x68,0x61,0x64,0x65,
    0x72,0x20,0x43,0x6f,0x6d,0x70,0x69,0x6c,0x65,0x72,0x20,0x31,0x30,0x2e,0x31,0x00,
    0x49,0x53,0x47,0x4e,0x74,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x68,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x07,0x07,0x00,0x00,0x68,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,
    0x68,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x03,0x03,0x00,0x00,0x68,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x07,0x00,0x00,0x00,
    0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x00,0xab,0xab,0xab,0x4f,0x53,0x47,0x4e,
    0x68,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x50,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x0f,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x03,0x0c,0x00,0x00,0x59,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x0f,0x00,0x00,0x00,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x00,0x53,0x56,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x00,0xab,0xab,0xab,0x53,0x48,0x45,0x58,
    0x2c,0x01,0x00,0x00,0x50,0x00,0x01,0x00,0x4b,0x00,0x00,0x00,0x6a,0x08,0x00,0x01,
    0x59,0x00,0x00,0x04,0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,
    0x5f,0x00,0x00,0x03,0x72,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x5f,0x00,0x00,0x03,
    0x32,0x10,0x10,0x00,0x02,0x00,0x00,0x00,0x65,0x00,0x00,0x03,0xf2,0x20,0x10,0x00,
    0x00,0x00,0x00,0x00,0x65,0x00,0x00,0x03,0x32,0x20,0x10,0x00,0x01,0x00,0x00,0x00,
    0x67,0x00,0x00,0x04,0xf2,0x20,0x10,0x00,0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x68,0x00,0x00,0x02,0x01,0x00,0x00,0x00,0x36,0x00,0x00,0x08,0xf2,0x20,0x10,0x00,
    0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x36,0x00,0x00,0x05,0x32,0x20,0x10,0x00,
    0x01,0x00,0x00,0x00,0x46,0x10,0x10,0x00,0x02,0x00,0x00,0x00,0x38,0x00,0x00,0x08,
    0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x56,0x15,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,
    0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x06,0x10,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,
    0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0xa6,0x1a,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,
    0xf2,0x20,0x10,0x00,0x02,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x3e,0x00,0x00,0x01,
    0x53,0x54,0x41,0x54,0x94,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};
/*
    cbuffer fs_compositor_params : register(b0)
    {
        float2 _76_screenResolution : packoffset(c0);
        float _76_time : packoffset(c0.z);
    };

    Texture2D<float4> core2DFrame : register(t0);
    SamplerState nearestSampler : register(s0);
    Texture2D<float4> core3DFrame : register(t1);

    static float2 texcoords;
    static float4 frag_color;
    static float4 color;

    struct SPIRV_Cross_Input
    {
        float4 color : TEXCOORD0;
        float2 texcoords : TEXCOORD1;
    };

    struct SPIRV_Cross_Output
    {
        float4 frag_color : SV_Target0;
    };

    float mod(float x, float y)
    {
        return x - y * floor(x / y);
    }

    float2 mod(float2 x, float2 y)
    {
        return x - y * floor(x / y);
    }

    float3 mod(float3 x, float3 y)
    {
        return x - y * floor(x / y);
    }

    float4 mod(float4 x, float4 y)
    {
        return x - y * floor(x / y);
    }

    float2 curve(inout float2 uv)
    {
        uv = (uv - 0.5f.xx) * 2.0f;
        uv *= 1.10000002384185791015625f;
        uv.x *= (1.0f + pow(abs(uv.y) * 0.20000000298023223876953125f, 2.0f));
        uv.y *= (1.0f + pow(abs(uv.x) * 0.25f, 2.0f));
        uv = mad(uv, 0.5f.xx, 0.5f.xx);
        uv = (uv * 0.920000016689300537109375f) + 0.039999999105930328369140625f.xx;
        return uv;
    }

    void frag_main()
    {
        float2 uv = texcoords;
        float2 param = texcoords;
        float2 _71 = curve(param);
        uv = _71;
        float _139 = abs((((16.0f * _71.x) * _71.y) * (1.0f - _71.x)) * (1.0f - _71.y));
        float _143 = 1.2999999523162841796875f - pow(_139, 0.800000011920928955078125f);
        float4 _144 = float4(0.00150000001303851604461669921875f, 0.0f, -0.001700000022538006305694580078125f, 0.0f) * _143;
        float4 _153 = float4(0.0f, -0.001599999959580600261688232421875f, 0.0f, 0.0f) * _143;
        float _168 = mad((sin(mad(0.300000011920928955078125f, _76_time, _71.y * 10.0f)) * sin(mad(0.699999988079071044921875f, _76_time, _71.y * 30.0f))) * sin(mad(_71.y, 20.0f, mad(0.3300000131130218505859375f, _76_time, 0.300000011920928955078125f))), 0.001000000047497451305389404296875f, _71.x);
        float2 _177 = float2(_168 + _144.x, _71.y + _153.x);
        float2 _198 = float2(_168 + _144.y, _71.y + _153.y);
        float2 _219 = float2(_168 + _144.z, _71.y + _153.z);
        float2 _240 = float2(_168 + _144.w, _71.y + _153.w);
        float4 _241 = core2DFrame.Sample(nearestSampler, _240);
        float _242 = _241.w;
        float4 _331 = lerp(float4(core3DFrame.Sample(nearestSampler, _177).x + 0.100000001490116119384765625f, core3DFrame.Sample(nearestSampler, _198).y + 0.100000001490116119384765625f, core3DFrame.Sample(nearestSampler, _219).z + 0.100000001490116119384765625f, core3DFrame.Sample(nearestSampler, _240).w), float4(core2DFrame.Sample(nearestSampler, _177).x + 0.100000001490116119384765625f, core2DFrame.Sample(nearestSampler, _198).y + 0.100000001490116119384765625f, core2DFrame.Sample(nearestSampler, _219).z + 0.100000001490116119384765625f, _242), _242.xxxx);
        float4 col = (((clamp((_331 * 0.60000002384185791015625f) + (((_331 * 0.4000000059604644775390625f) * _331) * 1.0f), 0.0f.xxxx, 1.0f.xxxx) * pow(_139, 0.300000011920928955078125f)) * 2.5f) * mad(0.20000000298023223876953125f, pow(clamp(mad(0.3499999940395355224609375f, sin(mad(3.5f, _76_time, (_71.y * _76_screenResolution.y) * 1.5f)), 0.3499999940395355224609375f), 0.0f, 1.0f), 1.7000000476837158203125f), 0.5f)) * mad(0.00999999977648258209228515625f, sin(110.0f * _76_time), 1.0f);
        bool _395 = _71.x < 0.0f;
        bool _402;
        if (!_395)
        {
            _402 = uv.x > 1.0f;
        }
        else
        {
            _402 = _395;
        }
        if (_402)
        {
            col = 0.0f.xxxx;
        }
        bool _409 = uv.y < 0.0f;
        bool _416;
        if (!_409)
        {
            _416 = uv.y > 1.0f;
        }
        else
        {
            _416 = _409;
        }
        if (_416)
        {
            col = 0.0f.xxxx;
        }
        float4 _431 = col;
        float4 _432 = _431 * mad(-0.64999997615814208984375f, clamp((mod(texcoords.x, 2.0f) - 1.0f) * 2.0f, 0.0f, 1.0f), 1.0f);
        col = _432;
        frag_color = float4(_432.xyz, 1.0f);
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        texcoords = stage_input.texcoords;
        color = stage_input.color;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.frag_color = frag_color;
        return stage_output;
    }
*/
static const uint8_t fs_compositor_bytecode_hlsl5[3584] = {
    0x44,0x58,0x42,0x43,0x1d,0xa0,0xb2,0xcc,0x93,0x2f,0x03,0x91,0x70,0x02,0xd9,0xce,
    0xf1,0xbd,0x3c,0x09,0x01,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x05,0x00,0x00,0x00,
    0x34,0x00,0x00,0x00,0x38,0x02,0x00,0x00,0x84,0x02,0x00,0x00,0xb8,0x02,0x00,0x00,
    0x64,0x0d,0x00,0x00,0x52,0x44,0x45,0x46,0xfc,0x01,0x00,0x00,0x01,0x00,0x00,0x00,
    0xf8,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,0x05,0xff,0xff,
    0x10,0x81,0x00,0x00,0xd4,0x01,0x00,0x00,0x52,0x44,0x31,0x31,0x3c,0x00,0x00,0x00,
    0x18,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x24,0x00,0x00,0x00,
    0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xbc,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0xcb,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x05,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0xd7,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x05,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x01,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0xe3,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x6e,0x65,0x61,0x72,0x65,0x73,0x74,0x53,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x00,0x63,0x6f,0x72,0x65,0x32,0x44,0x46,0x72,0x61,
    0x6d,0x65,0x00,0x63,0x6f,0x72,0x65,0x33,0x44,0x46,0x72,0x61,0x6d,0x65,0x00,0x66,
    0x73,0x5f,0x63,0x6f,0x6d,0x70,0x6f,0x73,0x69,0x74,0x6f,0x72,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x00,0xe3,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x10,0x01,0x00,0x00,
    0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x01,0x00,0x00,
    0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x7c,0x01,0x00,0x00,
    0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,
    0x00,0x00,0x00,0x00,0xa0,0x01,0x00,0x00,0x08,0x00,0x00,0x00,0x04,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0xb0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,
    0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x5f,0x37,0x36,0x5f,
    0x73,0x63,0x72,0x65,0x65,0x6e,0x52,0x65,0x73,0x6f,0x6c,0x75,0x74,0x69,0x6f,0x6e,
    0x00,0x66,0x6c,0x6f,0x61,0x74,0x32,0x00,0x01,0x00,0x03,0x00,0x01,0x00,0x02,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x75,0x01,0x00,0x00,0x5f,0x37,0x36,0x5f,
    0x74,0x69,0x6d,0x65,0x00,0x66,0x6c,0x6f,0x61,0x74,0x00,0xab,0x00,0x00,0x03,0x00,
    0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa9,0x01,0x00,0x00,
    0x4d,0x69,0x63,0x72,0x6f,0x73,0x6f,0x66,0x74,0x20,0x28,0x52,0x29,0x20,0x48,0x4c,
    0x53,0x4c,0x20,0x53,0x68,0x61,0x64,0x65,0x72,0x20,0x43,0x6f,0x6d,0x70,0x69,0x6c,
    0x65,0x72,0x20,0x31,0x30,0x2e,0x31,0x00,0x49,0x53,0x47,0x4e,0x44,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,
    0x38,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x03,0x03,0x00,0x00,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x00,0xab,0xab,0xab,0x4f,0x53,0x47,0x4e,0x2c,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x08,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x53,0x56,0x5f,0x54,
    0x61,0x72,0x67,0x65,0x74,0x00,0xab,0xab,0x53,0x48,0x45,0x58,0xa4,0x0a,0x00,0x00,
    0x50,0x00,0x00,0x00,0xa9,0x02,0x00,0x00,0x6a,0x08,0x00,0x01,0x59,0x00,0x00,0x04,
    0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x5a,0x00,0x00,0x03,
    0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x58,0x18,0x00,0x04,0x00,0x70,0x10,0x00,
    0x00,0x00,0x00,0x00,0x55,0x55,0x00,0x00,0x58,0x18,0x00,0x04,0x00,0x70,0x10,0x00,
    0x01,0x00,0x00,0x00,0x55,0x55,0x00,0x00,0x62,0x10,0x00,0x03,0x32,0x10,0x10,0x00,
    0x01,0x00,0x00,0x00,0x65,0x00,0x00,0x03,0xf2,0x20,0x10,0x00,0x00,0x00,0x00,0x00,
    0x68,0x00,0x00,0x02,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x32,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x10,0x10,0x00,0x01,0x00,0x00,0x00,0x02,0x40,0x00,0x00,
    0x00,0x00,0x00,0xbf,0x00,0x00,0x00,0xbf,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x38,0x00,0x00,0x0a,0x32,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0xcd,0xcc,0x0c,0x40,0xcd,0xcc,0x0c,0x40,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x08,0x42,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x1a,0x00,0x10,0x80,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x40,0x00,0x00,0xcd,0xcc,0x4c,0x3e,0x32,0x00,0x00,0x09,0x42,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x2a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x2a,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0x80,0x3f,0x38,0x00,0x00,0x07,
    0x22,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x2a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x08,0x12,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x1a,0x00,0x10,0x80,0x81,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x01,0x40,0x00,0x00,0x00,0x00,0x80,0x3e,0x32,0x00,0x00,0x09,0x12,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0x80,0x3f,0x38,0x00,0x00,0x07,
    0x42,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x1a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0f,0x32,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x96,0x05,0x10,0x00,0x01,0x00,0x00,0x00,0x02,0x40,0x00,0x00,
    0x00,0x00,0x00,0x3f,0x00,0x00,0x00,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x3f,0x00,0x00,0x00,0x3f,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0f,0x62,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x06,0x01,0x10,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
    0x1f,0x85,0x6b,0x3f,0x1f,0x85,0x6b,0x3f,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,
    0x00,0x00,0x00,0x00,0x0a,0xd7,0x23,0x3d,0x0a,0xd7,0x23,0x3d,0x00,0x00,0x00,0x00,
    0x38,0x00,0x00,0x07,0x12,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x1a,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x2a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x07,
    0x12,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x01,0x40,0x00,0x00,0x00,0x00,0x80,0x41,0x00,0x00,0x00,0x0b,0x62,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x56,0x06,0x10,0x80,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x3f,0x00,0x00,0x80,0x3f,
    0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x07,0x12,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x1a,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x38,0x00,0x00,0x07,0x12,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x2a,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x2f,0x00,0x00,0x06,
    0x12,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x0a,0x00,0x10,0x80,0x81,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x38,0x00,0x00,0x0a,0x32,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x06,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0xcd,0xcc,0x4c,0x3f,
    0x9a,0x99,0x99,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,0x00,0x00,0x05,
    0x32,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x46,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x00,0x00,0x00,0x08,0x12,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x0a,0x00,0x10,0x80,
    0x41,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x66,0x66,0xa6,0x3f,
    0x32,0x00,0x00,0x09,0x82,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x17,0xb7,0xd1,0xba,0x2a,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,0x42,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x2a,0x80,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,
    0xc3,0xf5,0xa8,0x3e,0x01,0x40,0x00,0x00,0x9a,0x99,0x99,0x3e,0x32,0x00,0x00,0x09,
    0x42,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x2a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x01,0x40,0x00,0x00,0x00,0x00,0xa0,0x41,0x2a,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x4d,0x00,0x00,0x06,0x42,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x00,0xd0,0x00,0x00,
    0x2a,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x38,0x00,0x00,0x0b,0x72,0x00,0x10,0x00,
    0x02,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x9a,0x99,0x99,0x3e,0x33,0x33,0x33,0x3f,
    0x00,0x00,0x60,0x40,0x00,0x00,0x00,0x00,0xa6,0x8a,0x20,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0c,0x32,0x00,0x10,0x00,0x02,0x00,0x00,0x00,
    0xa6,0x0a,0x10,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x20,0x41,
    0x00,0x00,0xf0,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x10,0x00,
    0x02,0x00,0x00,0x00,0x4d,0x00,0x00,0x06,0x32,0x00,0x10,0x00,0x02,0x00,0x00,0x00,
    0x00,0xd0,0x00,0x00,0x46,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x38,0x00,0x00,0x07,
    0x82,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x1a,0x00,0x10,0x00,0x02,0x00,0x00,0x00,
    0x0a,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x38,0x00,0x00,0x07,0x42,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x2a,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x3a,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x32,0x00,0x00,0x09,0x12,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x2a,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x6f,0x12,0x83,0x3a,
    0x1a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x45,0x00,0x00,0x8b,0xc2,0x00,0x00,0x80,
    0x43,0x55,0x15,0x00,0x42,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0xc6,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x86,0x7d,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x10,0x00,
    0x00,0x00,0x00,0x00,0x45,0x00,0x00,0x8b,0xc2,0x00,0x00,0x80,0x43,0x55,0x15,0x00,
    0x82,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0xc6,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x86,0x77,0x10,0x00,0x01,0x00,0x00,0x00,0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x07,0x22,0x00,0x10,0x00,0x03,0x00,0x00,0x00,0x3a,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0xcd,0xcc,0xcc,0x3d,0x00,0x00,0x00,0x07,
    0x22,0x00,0x10,0x00,0x04,0x00,0x00,0x00,0x2a,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x01,0x40,0x00,0x00,0xcd,0xcc,0xcc,0x3d,0x32,0x00,0x00,0x0c,0x32,0x00,0x10,0x00,
    0x05,0x00,0x00,0x00,0x06,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x02,0x40,0x00,0x00,
    0xa6,0x9b,0xc4,0x3a,0x89,0xd2,0xde,0xba,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x06,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x45,0x00,0x00,0x8b,0xc2,0x00,0x00,0x80,
    0x43,0x55,0x15,0x00,0x12,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x86,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x36,0x79,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x10,0x00,
    0x00,0x00,0x00,0x00,0x36,0x00,0x00,0x05,0x42,0x00,0x10,0x00,0x05,0x00,0x00,0x00,
    0x2a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x45,0x00,0x00,0x8b,0xc2,0x00,0x00,0x80,
    0x43,0x55,0x15,0x00,0x82,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x86,0x00,0x10,0x00,
    0x05,0x00,0x00,0x00,0x96,0x73,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x10,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x12,0x00,0x10,0x00,0x04,0x00,0x00,0x00,
    0x3a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0xcd,0xcc,0xcc,0x3d,
    0x45,0x00,0x00,0x8b,0xc2,0x00,0x00,0x80,0x43,0x55,0x15,0x00,0x82,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x96,0x05,0x10,0x00,0x05,0x00,0x00,0x00,0x46,0x7b,0x10,0x00,
    0x00,0x00,0x00,0x00,0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
    0x42,0x00,0x10,0x00,0x04,0x00,0x00,0x00,0x3a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x01,0x40,0x00,0x00,0xcd,0xcc,0xcc,0x3d,0x45,0x00,0x00,0x8b,0xc2,0x00,0x00,0x80,
    0x43,0x55,0x15,0x00,0x82,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x86,0x00,0x10,0x00,
    0x05,0x00,0x00,0x00,0x96,0x73,0x10,0x00,0x01,0x00,0x00,0x00,0x00,0x60,0x10,0x00,
    0x00,0x00,0x00,0x00,0x45,0x00,0x00,0x8b,0xc2,0x00,0x00,0x80,0x43,0x55,0x15,0x00,
    0x12,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x96,0x05,0x10,0x00,0x05,0x00,0x00,0x00,
    0x26,0x7d,0x10,0x00,0x01,0x00,0x00,0x00,0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x07,0x42,0x00,0x10,0x00,0x03,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0xcd,0xcc,0xcc,0x3d,0x00,0x00,0x00,0x07,
    0x12,0x00,0x10,0x00,0x03,0x00,0x00,0x00,0x3a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x01,0x40,0x00,0x00,0xcd,0xcc,0xcc,0x3d,0x00,0x00,0x00,0x08,0xd2,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x06,0x09,0x10,0x80,0x41,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x06,0x09,0x10,0x00,0x04,0x00,0x00,0x00,0x32,0x00,0x00,0x09,0xd2,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x06,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x06,0x0e,0x10,0x00,
    0x01,0x00,0x00,0x00,0x06,0x09,0x10,0x00,0x03,0x00,0x00,0x00,0x38,0x00,0x00,0x07,
    0xb2,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x86,0x0c,0x10,0x00,0x01,0x00,0x00,0x00,
    0x86,0x0c,0x10,0x00,0x01,0x00,0x00,0x00,0x38,0x00,0x00,0x0a,0xb2,0x00,0x10,0x00,
    0x02,0x00,0x00,0x00,0x46,0x0c,0x10,0x00,0x02,0x00,0x00,0x00,0x02,0x40,0x00,0x00,
    0xcd,0xcc,0xcc,0x3e,0xcd,0xcc,0xcc,0x3e,0x00,0x00,0x00,0x00,0xcd,0xcc,0xcc,0x3e,
    0x32,0x20,0x00,0x0c,0xd2,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x06,0x0e,0x10,0x00,
    0x01,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x9a,0x99,0x19,0x3f,0x00,0x00,0x00,0x00,
    0x9a,0x99,0x19,0x3f,0x9a,0x99,0x19,0x3f,0x06,0x0d,0x10,0x00,0x02,0x00,0x00,0x00,
    0x38,0x00,0x00,0x07,0x72,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x56,0x05,0x10,0x00,
    0x01,0x00,0x00,0x00,0x86,0x03,0x10,0x00,0x01,0x00,0x00,0x00,0x38,0x00,0x00,0x0a,
    0x72,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x01,0x00,0x00,0x00,
    0x02,0x40,0x00,0x00,0x00,0x00,0x20,0x40,0x00,0x00,0x20,0x40,0x00,0x00,0x20,0x40,
    0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x08,0x12,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x2a,0x00,0x10,0x00,0x05,0x00,0x00,0x00,0x1a,0x80,0x20,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x09,0x12,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0xc0,0x3f,
    0x2a,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x4d,0x00,0x00,0x06,0x12,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x00,0xd0,0x00,0x00,0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x32,0x00,0x00,0x09,0x12,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x33,0x33,0xb3,0x3e,0x01,0x40,0x00,0x00,
    0x33,0x33,0xb3,0x3e,0x2f,0x00,0x00,0x05,0x12,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x07,0x12,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,
    0x9a,0x99,0xd9,0x3f,0x19,0x00,0x00,0x05,0x12,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x09,0x12,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,
    0xcd,0xcc,0x4c,0x3e,0x01,0x40,0x00,0x00,0x00,0x00,0x00,0x3f,0x38,0x00,0x00,0x07,
    0x72,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x02,0x10,0x00,0x01,0x00,0x00,0x00,0x38,0x00,0x00,0x08,0x12,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0xdc,0x42,0x2a,0x80,0x20,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4d,0x00,0x00,0x06,0x12,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x00,0xd0,0x00,0x00,0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x32,0x00,0x00,0x09,0x12,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x0a,0xd7,0x23,0x3c,0x01,0x40,0x00,0x00,
    0x00,0x00,0x80,0x3f,0x38,0x00,0x00,0x07,0x72,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x06,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x01,0x00,0x00,0x00,
    0x38,0x00,0x00,0x07,0x12,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x0a,0x10,0x10,0x00,
    0x01,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0x00,0x3f,0x41,0x00,0x00,0x05,
    0x12,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x32,0x00,0x00,0x0a,0x12,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x10,0x80,
    0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0x00,0x40,
    0x0a,0x10,0x10,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x12,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,
    0x00,0x00,0x80,0xbf,0x00,0x20,0x00,0x07,0x12,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x32,0x00,0x00,0x09,0x12,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x66,0x66,0x26,0xbf,0x01,0x40,0x00,0x00,
    0x00,0x00,0x80,0x3f,0x38,0x00,0x00,0x07,0x72,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x06,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x01,0x00,0x00,0x00,
    0x1d,0x00,0x00,0x0a,0x92,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x56,0x09,0x10,0x00,
    0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x31,0x00,0x00,0x0a,0x62,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x3f,
    0x00,0x00,0x80,0x3f,0x00,0x00,0x00,0x00,0x56,0x06,0x10,0x00,0x00,0x00,0x00,0x00,
    0x37,0x00,0x00,0x0c,0x32,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0xc6,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x96,0x05,0x10,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x3c,0x00,0x00,0x07,0x12,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x1a,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x37,0x00,0x00,0x0c,
    0x72,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x01,0x00,0x00,0x00,0x36,0x00,0x00,0x05,
    0x82,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0x80,0x3f,
    0x3e,0x00,0x00,0x01,0x53,0x54,0x41,0x54,0x94,0x00,0x00,0x00,0x4e,0x00,0x00,0x00,
    0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x41,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

};
static inline const sg_shader_desc* compositor_shader_desc(sg_backend backend) {
    if (backend == SG_BACKEND_D3D11) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.attrs[0].sem_name = "TEXCOORD";
            desc.attrs[0].sem_index = 0;
            desc.attrs[1].sem_name = "TEXCOORD";
            desc.attrs[1].sem_index = 1;
            desc.attrs[2].sem_name = "TEXCOORD";
            desc.attrs[2].sem_index = 2;
            desc.attrs[3].sem_name = "TEXCOORD";
            desc.attrs[3].sem_index = 3;
            desc.vs.bytecode.ptr = vs_compositor_bytecode_hlsl5;
            desc.vs.bytecode.size = 1036;
            desc.vs.entry = "main";
            desc.vs.uniform_blocks[0].size = 64;
            desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.fs.bytecode.ptr = fs_compositor_bytecode_hlsl5;
            desc.fs.bytecode.size = 3584;
            desc.fs.entry = "main";
            desc.fs.uniform_blocks[0].size = 16;
            desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.fs.images[0].used = true;
            desc.fs.images[0].multisampled = false;
            desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.images[1].used = true;
            desc.fs.images[1].multisampled = false;
            desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[1].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.samplers[0].used = true;
            desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.fs.image_sampler_pairs[0].used = true;
            desc.fs.image_sampler_pairs[0].image_slot = 0;
            desc.fs.image_sampler_pairs[0].sampler_slot = 0;
            desc.fs.image_sampler_pairs[1].used = true;
            desc.fs.image_sampler_pairs[1].image_slot = 1;
            desc.fs.image_sampler_pairs[1].sampler_slot = 0;
            desc.label = "compositor_shader";
        }
        return &desc;
    }
    return 0;
}
