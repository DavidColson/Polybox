/*
// ***************************************************************
// [TEST] Basic expressionsprint(func () -> void);

dave := 3*12.3/8+1;
print(dave);
dave = 2.0;
print(dave);

print(2 < 5);

// ***************************************************************
// [TEST] Basic type variables

// print(myType); // Error
myType := i32;
print(myType); // i32

print(myConstType); // f32
myConstType :: f32;

// ***************************************************************
// [TEST] Basic constant values

print(myInt); // 5
print(inferredConst); // true
myInt:i32 : 5;
inferredConst :: true;

// myvar := 5.0;
// myconst :: myvar; // Error: Can't initialize with non const value
// notInitConst:f32 : ; // Error, can't have no initializer for a const
// inferredConst = false; // Error, can't assign to a const

// ***************************************************************
// [TEST] Basic variables

// print(myFloat); // Error not defined
myFloat: f32 = 6.0;
print(myFloat + 2.0); // 8.0

myBool: bool;
print(myBool); // false (uninitialized things are 0)
myBool = true;
print(myBool); // true

// ***************************************************************
// [TEST] Control flow

tester:= 7;
lucy:= 0;
// If statements
if tester < 5 && lucy == 0 {
    lucy = 10;
} else if tester == 5 {
    lucy = 27;
} else {
    lucy = 20;
}
print(lucy);

// Loops
nTerms := 4;
n := 0;
while n < nTerms {
    print(n);
    n = n+1;
}

// ***************************************************************
// [TEST] Constant function test (out of order declaration and call)

print(add(5, 5.0, true)); // 5\n5.0\ntrue\n7
add :: func (num: i32, float: f32, boolean: bool) -> f32 {
    print(num);
    print(float);
    print(boolean);
    
    result := 0;
    result = 5+2;
    return result;
};
print(add(3, 3.0, false)); // 3\n3.0\nfalse\n7

// ***************************************************************
// [TEST] Function return test

printNumbers :: func (n: i32) {
    if (n > 0) {
        print(n);
        return;
    } else {
        print(n + 10);
        return;
    }
};
printNumbers(88); // 88
printNumbers(-1); // 9

// ***************************************************************
// [TEST] Function variables

addSomething := func (num: i32) -> i32 {
    return num+1;
};
print(addSomething(2)); // 3
addSomething = func (num: i32) -> i32 {
    return num+2;
};
print(addSomething(2)); // 4
constAddThree :: func (num: i32) -> i32 {
    return num+3;
};
addSomething = constAddThree;
print(addSomething(2)); // 5

// Gives error
// addSomething = func (num: i32, second: f32) -> i32 {
//     return num+second;
// };

// ***************************************************************
// [TEST] Function type variables (in different forms)

funcType := func (i32, f32) -> i32;
print(funcType); // func (i32, f32) -> i32

funcTypeNamedParams := func (num: i32, num2: f32) -> i32;
print(funcTypeNamedParams); // func (i32, f32) -> i32

// Should compile fine, but can't refer to params anymore
// funcWithUnnamedParams :: func (i32, f32) -> i32 { 
//     return 0;
// };

funcTypeNoReturn := func (i32, f32);
print(funcTypeNoReturn); // func (i32, f32)

funcTypeNoParams := func () -> i32;
print(funcTypeNoParams); // func () -> i32

funcTypeNoParamsNoReturn := func ();
print(funcTypeNoParamsNoReturn); // func ()

// ***************************************************************
// [TEST] Recursive Functions

fibonacci :: func (n: i32) -> i32 {
    if (n <= 1)
        return n;
    else
        return fibonacci(n-1) + fibonacci(n-2);
};
print(fibonacci(7)); // 13

// Won't compile, can't resolve function name at compile time
// nonConstFibonacci := func (n: i32) -> i32 {
//     if (n <= 1)
//         return n;
//     else
//         return nonConstFibonacci(n-1) + nonConstFibonacci(n-2);
// };
// print(nonConstFibonacci(7)); // 13

// ***************************************************************
// [TEST] Scopes

myTopLevelVar := 21;
{
    print(myTopLevelVar); // 21
    print(myTopLevelConst); // 3
    // print(myScopedConst); // Error: not defined in valid scope
    // print(myScopedVar); // Error: not defined in valid scope
}
print(myTopLevelVar); // 21

myTopLevelConst :: 3;
{
    myScopedConst :: 5;
    myScopedVar := 25;
}

// ***************************************************************
// [TEST] Variable assignment expressions

myExampleVar := 10;
print(myExampleVar = 12); // 12

// ***************************************************************
// [TEST] Structs
instanceOfStruct : BabysFirstStruct;
instanceOfStruct.floatMember = 1337.0;
instanceOfStruct.intMember = 1337;
print(instanceOfStruct.floatMember); // 1337.0

BabysFirstStruct :: struct {
	boolMember: bool;
	floatMember: f32;
	intMember: i32;
};

// Struct with another struct as a member
SecondStruct :: struct {
	floatMember: f32;
	intMember: i32;
	innerStruct: BabysFirstStruct;
};

secondInstance : SecondStruct;
secondInstance.floatMember = 420.0;
secondInstance.intMember = 22;
secondInstance.innerStruct = instanceOfStruct;

print(secondInstance.floatMember); // 420.0
print(secondInstance.innerStruct.floatMember); // 1337.0

NonConstStruct := struct {
    member: i32;
};
// instanceOfNonConstStruct : NonConstStruct; // Error: Type annotation for declaration must be a constant

constFloat :: 6.0;
floatVariable := 5.0;
StructWithImperativeCode :: struct {
    boolMember: bool;
    constFloat; // Fine, constant code, nothing to execute
    initializedMember:i32 : 5; // Fine, constant code, nothing to execute

    // add(5, 5.0, true); // Error: Can't run imperative code in struct scope
    // floatMember:f32 = floatVariable; // Error: Can't have non const initializers in data scope
    // {} // Error, can't have imperative code block inside struct scope
    // if (true) {} // Error, can't have if statements in struct scope
    // return 5; // Error, can't have return statements in struct scope
};

// ***************************************************************
// [TEST] Struct literals

literalInitializer := BabysFirstStruct.{ intMember = 88, boolMember = false, floatMember = 921.3 };
print(literalInitializer.floatMember); // 921.3

literalInitializer = BabysFirstStruct.{ true, 2.34, 13 };
print(literalInitializer.boolMember); // true
print(literalInitializer.intMember); // 13

inferredStructLiteral : SecondStruct = .{ intMember = 76 };
print(inferredStructLiteral.intMember); // 76

zeroStruct : BabysFirstStruct = .{};
print(zeroStruct.intMember); // 0

recursiveStructLiteral := SecondStruct.{ floatMember = 44.9, innerStruct = .{ intMember = 698, boolMember = true } };
print(recursiveStructLiteral.innerStruct.intMember); // 698
print(recursiveStructLiteral.floatMember); // 44.9

// ***************************************************************
// [TEST] Struct function args

FunctionWithStructArgs :: func (anint : i32, example: BabysFirstStruct, afloat : f32) {
	print(anint);
	print(example.intMember);
	print(afloat);
};

FunctionWithStructArgs(44, instanceOfStruct, 4.9); // 44, 1337, 4.9
FunctionWithStructArgs(33, .{ intMember = 420 }, 6.8); // 33, 420, 6.8

// ***************************************************************
// [TEST] Pointers
{
	someInt := 33;
	pInt : ^i32 = @someInt;

	someInt = 55;
	randomValueOnStack := 22;

	print(pInt^); // 55

	someInt = 1337;
	print(pInt^); // 1337

	pInt^ = 666;
	print(someInt); // 666

	instance := BabysFirstStruct.{ true, 44.9, 88 };
	pInstance : ^BabysFirstStruct = @instance;

	print(pInstance^.intMember); // 88

	instance.floatMember = 238.7;

	print(pInstance^.floatMember); // 238.7

	pInstance^.boolMember = false;
	print(instance.boolMember); // false

	pMember := @instance.intMember;
	pMember^ = 97;
	print(instance.intMember); // 97
}

// ***************************************************************
// [TEST] Static Arrays

{
	// TODO: test structs and arrays as function returns
	array : [3]i32; // basic type, parsed as a prefix operator in the expression parser
	array[0] = 5; // array element selector node, similar to selector node, infix operator
	array[1] = 3;
	array[2] = 9;
	print(array[1]); // still selector node, but this time not an lvalue	
	print(array[2]);

	// Arrays of structs 
	Element :: struct{ num:i32; float:f32; };
	structArray : [5]Element;
	structArray = .[ Element.{5, 6.8}, .{3, 9.8}, .{6, 5.5}, .{10, 2.4}, .{4, 3.78}];
	print(structArray[1].num); // 3
	structArray[3].float = 420.9;
	print(structArray[3].float); // 420.9

	// Passing arrays into functions
	argArray := f32.[33.4, 22.1, 55.9];
	arrayPrinter :: func (arr : [3]f32) { print(arr[1]); };
	arrayPrinter(argArray); // 22.1

	// Array literals
	array = i32.[ 4, 5, 6 ]; // array literal, similar sort of parsing to struct literal, maybe share?
	array2 : [2]f32 = .[3.89, 5.7];
	print(array[2]); // 6
	print(array2[1]);// 5.7
	
	// multidimensional arrays
	marray : [10][3]i32;
	marray[4][2] = 32;
	print(marray[4][2]); // 32

	print(len(marray)); // 10
	print(len(array)); // 3
}
*/
// ***************************************************************
// [TEST] Slices

{
	// slice type
	slice : []i32;
	
	// create slices from an array
	array := i32.[1, 2, 3, 4, 5, 6, 7];
	slice = array[2:5]; // low bound and high bound

	// Further bits to do and test
	// slices can be auto casted from an array

	sliceliteral := i32.[6, 4, 3, 3, 1]; // secretly this auto casts from array to slice

// How do we implement this then?
/*

Parsing:

ParseArrayType should check for closing bracket, then emit a slice
Might be wise to share the Ast Node for all array types

ParseSelector is where we implement the slicing syntax
Assuming parseExpression doesn't consume the colon, then we need to parse expression, check colon, parse expression again
we should get two expressions that need to resolve to integer, need not be constant

Codegen for slicing:

the slicing syntax is sort of like a literal, made at source, so you will need to reserve space for the slice
like you would a struct, and then the actual codegen of the slice is just initializing it
It'll be like a struct internally, so you need to store the 32bit base pointer at 0, and the count at 4 bytes in

base pointer is the base array pointer plus the offset*elementSize
Size is just the sub between low and high bounds
must support blank bounds too, which are easy, just the backing array base or size
*/
}
