// Blocks
{
    // Basic expressions
    dave := 3*12.3/8+1;
    dave = 2.0;
    print(dave);
    testBool: bool;
    testBool = true;
    print(testBool);

    // If statements
    tester:= 7;
    lucy:= 0;
    if tester < 5 && lucy == 0 {
        lucy = 10;
    } else if tester == 5 {
        lucy = 27;
    } else {
        lucy = 20;
    }
    print(lucy);

    // Types as first class values
    myType:Type = i32;
    print(myType);

    myTypeType := Type;
    print(myTypeType);

    funcType := fn (i32, f32) -> i32;
    print(funcType);

	// Type casting
	castValue := 5 * 12 + as(i32) 4.0;
	print(castValue);
}

// Functions
add := func (num: i32, float: f32, boolean: bool) -> i32 {
    print(num);
    print(float);
    print(boolean);
    
    result := 0;
    result = 5+2;
    return result;
}

print(add(5, 55.2, true));

// Recursion
fibonacci := func (n: i32) -> i32 {
    if (n <= 1)
        return n;
    else
        return fibonacci(n-1) + fibonacci(n-2);
}

// Loops
nTerms := 10;
n := 0;
while n < nTerms {
    print(fibonacci(n));
    n = n+1;
}

